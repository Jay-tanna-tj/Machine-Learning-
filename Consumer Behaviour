#  Importing Necessary imports
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder, KBinsDiscretizer
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

#loading the dataset
# Mounting the google drive
from google.colab import drive
data=drive.mount('/content/drive')

# Load the dataset
df = pd.read_csv('/content/drive/MyDrive/customer behaviour/Customer_Behaviour.csv')

#Data Exploratory Anaylsis
df.head()
df.corr()

df.describe()

# @title EstimatedSalary
from matplotlib import pyplot as plt
df['EstimatedSalary'].plot(kind='hist', bins=20, title='EstimatedSalary')
plt.gca().spines[['top', 'right',]].set_visible(False)


# @title Age
from matplotlib import pyplot as plt
df['Age'].plot(kind='hist', bins=20, title='Age')
plt.gca().spines[['top', 'right',]].set_visible(False)

# @title Gender

from matplotlib import pyplot as plt
df['Gender'].plot(kind='hist', bins=20, title='Gender')
plt.gca().spines[['top', 'right',]].set_visible(False)


# @title User ID

from matplotlib import pyplot as plt
df['User ID'].plot(kind='hist', bins=20, title='User ID')
plt.gca().spines[['top', 'right',]].set_visible(False)



# Setting the aesthetic style of the plots
sns.set_style("whitegrid")

# Plotting distributions and relationships
fig, ax = plt.subplots(1, 3, figsize=(18, 5))

# Distribution of Age
sns.histplot(df['Age'], bins=20, kde=True, ax=ax[0])
ax[0].set_title('Distribution of Age')


# Distribution of EstimatedSalary
sns.histplot(df['EstimatedSalary'], bins=20, kde=True, ax=ax[1])
ax[1].set_title('Distribution of EstimatedSalary')

# Purchase frequency by Gender
sns.countplot(x='Gender', hue='Purchased', data=df, ax=ax[2])
ax[2].set_title('Purchase Frequency by Gender')

plt.tight_layout()
plt.show()

plt.figure(figsize=(16, 5))
plt.subplot(1, 2, 1)
sns.barplot(x='Gender', y='EstimatedSalary', hue='Purchased', data=df)
plt.title('Salary by Gender and Purchase Status')

plt.subplot(1, 2, 2)
sns.scatterplot(x='Age', y='EstimatedSalary', hue='Purchased', data=df)
plt.title('Age vs. Salary by Purchase Status')
plt.show()

# Displaying Correlation Heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(df.corr(), annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

# Feature Engineering
# Binning Age into categories
age_bins = KBinsDiscretizer(n_bins=3, encode='ordinal', strategy='uniform')
df['AgeGroup'] = age_bins.fit_transform(df[['Age']])

# Binning EstimatedSalary into categories
salary_bins = KBinsDiscretizer(n_bins=3, encode='ordinal', strategy='uniform')
df['SalaryRange'] = salary_bins.fit_transform(df[['EstimatedSalary']])

# Creating an interaction feature between Age and EstimatedSalary
df['Age_Salary_Interaction'] = df['Age'] * df['EstimatedSalary']

# Encoding categorical variables and preparing features
df['Gender'] = LabelEncoder().fit_transform(df['Gender'])
features = ['Gender', 'Age', 'EstimatedSalary', 'AgeGroup', 'SalaryRange', 'Age_Salary_Interaction']
X = df[features]
y = df['Purchased']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Model Training, Prediction, and Evaluation
models = {
    "KNN": KNeighborsClassifier(),
    "Decision Tree": DecisionTreeClassifier(random_state=42),
    "Random Forest": RandomForestClassifier(random_state=42)
}

for name, model in models.items():
    model.fit(X_train_scaled, y_train)
    predictions = model.predict(X_test_scaled)
    print(f"{name} Model Evaluation:")
    print(classification_report(y_test, predictions))
    cm = confusion_matrix(y_test, predictions)
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title(f'Confusion Matrix: {name}')
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.show()


